import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;

public class CreateNewHandler implements ActionListener{

	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == ControlsMenuBar.newProject) {
			//TODO creating new project folder goes here
			System.out.println("Pretend I made a new project!");
		}
		
		// creating new .java files handler
		if (e.getSource() == ControlsMenuBar.newClass || e.getSource() == HeirarchyExplorer.newClassButton) {
			//TODO new file GUI window
			createNewJavaFile();
		}
		
		if (e.getSource() == ControlsMenuBar.newFolder) {
			//TODO creating new folder goes here
		}
	}
	
	private static String findFreeName(File directory, String fileName, String extention) {
		int num = 1;
        String availableName;
        File file;

        do {
            availableName = fileName + num + extention;
            file = new File(directory.toString() + "\\" + availableName);
            num++;
        } while (file.exists());

        return "\\" + availableName;
	}
	
	public static void createNewJavaFile() {
		File selectedFile;
		
		// validation
		if (HeirarchyExplorer.getSelectedNodeDirectory() == null) {
			JOptionPane.showMessageDialog(null, "Please select a folder", "No Folder Selected", JOptionPane.ERROR_MESSAGE);
		} else {
			// everything about creating new file starts here
			selectedFile = new File(HeirarchyExplorer.getSelectedNodeDirectory());
			DefaultMutableTreeNode lastComponent = (DefaultMutableTreeNode) HeirarchyExplorer.path.getLastPathComponent();
			
			// if not a directory then get the parent node
			if (!selectedFile.isDirectory()) {
				selectedFile = new File(HeirarchyExplorer.getParentDirectory(HeirarchyExplorer.getSelectedNodeDirectory()));
				lastComponent = (DefaultMutableTreeNode) lastComponent.getParent();
			}
			
			//if the file already exists then find a new name for it
			if (new File(selectedFile.toString() + "\\javaClass.java").exists()) {
				selectedFile = new File(selectedFile.toString() + findFreeName(selectedFile, "javaClass", ".java"));
			}
			else {
				selectedFile = new File(selectedFile.toString() + "\\javaClass.java");
			}
			
			System.out.println(selectedFile);
			Path newFile = Paths.get(selectedFile.toString());
			
			List<String> autoGeneratedClass = new ArrayList<>();
			autoGeneratedClass.add("\npublic class AutoGeneratedClass {\n");
			autoGeneratedClass.add("	\tpublic static void main(String[] args) {\n\n\t}\n}\n");
			
			try {
				selectedFile.createNewFile();
				
				Files.write(newFile, autoGeneratedClass, StandardCharsets.UTF_8);
			} catch (IOException e1) {
				// TODO Auto-generated catch block
			} finally {
				lastComponent.add(new DefaultMutableTreeNode(selectedFile.getName()));
				HeirarchyExplorer.updateFileTree((TreeNode) lastComponent);
			}
		}
	}
}
